// Copyright (c) {{&year}} {{&copyright}}. All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
//
// {{fileName}}
// Created by {{&author}} on {{&date}}.
//


#ifndef {{&includeGuard}}
#define {{&includeGuard}}

{{#includes}}
#include <{{.}}>
{{/includes}}

{{#namespace}}
namespace {{namespace}} {

{{/namespace}}

{{#classDescription}}
/**
 * {{classDescription}}
 */
{{/classDescription}}
class {{&className}} {

public:

{{#structs}}
    {{#description}}/** {{description}} */{{/description}}
    struct {{name}} {
        {{#fields}}
        {{type}} {{name}}{{sizeLst}}{{#default}} = {{&default}}{{/default}};{{#description}} // {{&description}}{{/description}}{{#unit}} (in *{{&unit}}*){{/unit}}
        {{/fields}}
    };

{{/structs}}


protected:

{{#attributes}}
    {{type}} {{name}}{{#init}}{{&init}}{{/init}}{{#default}} = {{&default}}{{/default}};{{#description}} // {{&description}}{{/description}}
{{/attributes}}


public:

    /** Default constructor */
    {{&className}}() = default;


    /** Default destructor */
    virtual ~{{&className}}() = default;


    /** This method resets the vehicle memory */
    virtual void reset() = 0;

{{#attributes}}
{{#getter}}
    /**
    * Returns the {{label}} the model
    * @return The {{label}}
    */
    virtual {{type}} {{getter}}() const {
        return {{name}};
    }


{{/getter}}
{{/attributes}}
{{#attributes}}
    /**
    * Returns the pointer for the {{label}} structure of the model
    * @return The {{label}} pointer
    */
    virtual {{type}} *get{{key}}() {
        return &{{name}};
    }


    /**
    * Returns the const pointer for the {{label}} structure of the model
    * @return The const {{label}} point
    */
    virtual const {{type}} *get{{key}}() const {
        return &{{name}};
    }


{{/attributes}}
};
{{#namespace}}

} // namespace
{{/namespace}}

#endif // {{&includeGuard}}
